From: Filipe Freire <livrofubia@gmail.com>
Date: Fri, 4 Oct 2025 00:00:00 +0000
Subject: Fix concurrent headless training in LearningAgents plugin

When multiple headless training processes run concurrently with the same TaskName,
they currently reuse the same numbered slots (TaskName0, TaskName1, etc.),
causing runs to overwrite each other's artifacts and TensorBoard logs.

This patch creates unique run directories by combining:
- Sanitized task name
- Timestamp (YYYY-MM-DD_HH-MM-SS)
- GUID suffix

Example: "MyTask-2025-10-03_14-30-45-a1b2c3d4e5f6"

Preserves all training artifacts and TensorBoard runs and maintains backward compatibility (IntermediatePath still updated)

---
 .../Private/LearningExternalTrainer.cpp       | 25 ++++++++-----------
 1 file changed, 10 insertions(+), 15 deletions(-)

diff --git a/Source/LearningTraining/Private/LearningExternalTrainer.cpp b/Source/LearningTraining/Private/LearningExternalTrainer.cpp
index 1234567..abcdefg 100644
--- a/Source/LearningTraining/Private/LearningExternalTrainer.cpp
+++ b/Source/LearningTraining/Private/LearningExternalTrainer.cpp
@@ -52,27 +52,22 @@ namespace UE::Learning
 		Controls.View[(uint8)SharedMemoryTraining::EControls::NetworkId] = -1;
 		Controls.View[(uint8)SharedMemoryTraining::EControls::ReplayBufferId] = -1;
 
 		const FString TimeStamp = FDateTime::Now().ToFormattedString(TEXT("%Y-%m-%d_%H-%M-%S"));
-		const FString TrainerType = TEXT("SharedMemory");
-
-		// Make a config directory for the task
-		int32 TaskId = 0;
-		while (true)
-		{
-			FString CandidatePath = InIntermediatePath / TaskName + FString::FromInt(TaskId) / TEXT("Configs");
-			IPlatformFile& PlatformFile = FPlatformFileManager::Get().GetPlatformFile();
-			if (!PlatformFile.DirectoryExists(*CandidatePath))
-			{
-				PlatformFile.CreateDirectory(*CandidatePath);
-				ConfigPath = CandidatePath;
-				break;
-			}
-
-			TaskId++;
-		}
+		const FString SanitizedTaskName = FPaths::MakeValidFileName(TaskName, TEXT('_'));
+		const FString UniqueSuffix = FGuid::NewGuid().ToString(EGuidFormats::Digits);
+		const FString RunFolderName = SanitizedTaskName.IsEmpty()
+			? UniqueSuffix
+			: FString::Printf(TEXT("%s-%s-%s"), *SanitizedTaskName, *TimeStamp, *UniqueSuffix);
+		const FString RunFolderPath = InIntermediatePath / RunFolderName;
+		const FString ConfigFolderPath = RunFolderPath / TEXT("Configs");
+
+		IPlatformFile& PlatformFile = FPlatformFileManager::Get().GetPlatformFile();
+		if (!PlatformFile.CreateDirectoryTree(*ConfigFolderPath))
+		{
+			UE_LOG(LogLearning, Error, TEXT("Failed to create training config directory: %s"), *ConfigFolderPath);
+		}
+
+		IntermediatePath = RunFolderPath;
+		ConfigPath = ConfigFolderPath;
 
 		IFileManager& FileManager = IFileManager::Get();
-		const FString CommandLineArguments = FString::Printf(TEXT("\"%s\" \"%s\" -p \"%s\" -m \"%s\" \"%s\" SharedMemory \"%s\" -g \"%s\""),
+		const FString CommandLineArguments = FString::Printf(TEXT("\"%s\" \"%s\" -p \"%s\" -m \"%s\" \"%s\" SharedMemory \"%s\" -g \"%s\""),
 			*FileManager.ConvertToAbsolutePathForExternalAppForRead(*(PythonContentPath / TEXT("train.py"))),
 			*TaskName,
 			*FileManager.ConvertToAbsolutePathForExternalAppForRead(*CustomTrainerPath),
 			*TrainerFileName,
 			LogSettings == ELogSetting::Normal ? TEXT("-l") : TEXT(""),
-			*FileManager.ConvertToAbsolutePathForExternalAppForRead(*(InIntermediatePath / TaskName + FString::FromInt(TaskId))),
+			*FileManager.ConvertToAbsolutePathForExternalAppForRead(*RunFolderPath),
 			*Controls.Guid.ToString(PLATFORM_MAC ? EGuidFormats::Short : EGuidFormats::DigitsWithHyphensInBraces));
 
 		bool bLaunched = TrainingProcess.Launch(
-- 
2.43.0
