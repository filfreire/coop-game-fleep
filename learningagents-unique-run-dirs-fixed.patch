diff --git a/Engine/Plugins/Experimental/LearningAgents/Source/LearningTraining/Private/LearningExternalTrainer.cpp b/Engine/Plugins/Experimental/LearningAgents/Source/LearningTraining/Private/LearningExternalTrainer.cpp
index c8d878b29a91..6e3af71c24ab 100644
--- a/Engine/Plugins/Experimental/LearningAgents/Source/LearningTraining/Private/LearningExternalTrainer.cpp
+++ b/Engine/Plugins/Experimental/LearningAgents/Source/LearningTraining/Private/LearningExternalTrainer.cpp
@@ -55,24 +55,26 @@ namespace UE::Learning
 		Controls.View[(uint8)SharedMemoryTraining::EControls::ReplayBufferId] = -1;
 
 		const FString TimeStamp = FDateTime::Now().ToFormattedString(TEXT("%Y-%m-%d_%H-%M-%S"));
-		const FString TrainerType = TEXT("SharedMemory");
-		
-		// Make a config directory for the task
-		int32 TaskId = 0;
-		while (true)
-		{
-			FString CandidatePath = InIntermediatePath / TaskName + FString::FromInt(TaskId) / TEXT("Configs");
-			IPlatformFile& PlatformFile = FPlatformFileManager::Get().GetPlatformFile();
-			if (!PlatformFile.DirectoryExists(*CandidatePath))
-			{
-				PlatformFile.CreateDirectory(*CandidatePath);
-				ConfigPath = CandidatePath;
-				break;
-			}
 
-			TaskId++;
+		// Create a unique run directory to support concurrent runs for the same TaskName
+		const FString SanitizedTaskName = FPaths::MakeValidFileName(TaskName, TEXT('_'));
+		const FString UniqueSuffix = FGuid::NewGuid().ToString(EGuidFormats::Digits);
+		const FString RunFolderName = SanitizedTaskName.IsEmpty()
+			? UniqueSuffix
+			: FString::Printf(TEXT("%s-%s-%s"), *SanitizedTaskName, *TimeStamp, *UniqueSuffix);
+		const FString RunFolderPath = InIntermediatePath / RunFolderName;
+		const FString ConfigFolderPath = RunFolderPath / TEXT("Configs");
+
+		IPlatformFile& PlatformFile = FPlatformFileManager::Get().GetPlatformFile();
+		if (!PlatformFile.CreateDirectoryTree(*ConfigFolderPath))
+		{
+			UE_LOG(LogLearning, Error, TEXT("Failed to create training config directory: %s"), *ConfigFolderPath);
 		}
 
+		// Update paths to point at the per-run folder
+		IntermediatePath = RunFolderPath;
+		ConfigPath = ConfigFolderPath;
+
 		IFileManager& FileManager = IFileManager::Get();
 		const FString CommandLineArguments = FString::Printf(TEXT("\"%s\" \"%s\" -p \"%s\" -m \"%s\" \"%s\" SharedMemory \"%s\" -g \"%s\""),
 			*FileManager.ConvertToAbsolutePathForExternalAppForRead(*(PythonContentPath / TEXT("train.py"))),
@@ -80,7 +82,7 @@ namespace UE::Learning
 			*FileManager.ConvertToAbsolutePathForExternalAppForRead(*CustomTrainerPath),
 			*TrainerFileName,
 			LogSettings == ELogSetting::Normal ? TEXT("-l") : TEXT(""),
-			*FileManager.ConvertToAbsolutePathForExternalAppForRead(*(InIntermediatePath / TaskName + FString::FromInt(TaskId))),
+			*FileManager.ConvertToAbsolutePathForExternalAppForRead(*RunFolderPath),
 			*Controls.Guid.ToString(PLATFORM_MAC ? EGuidFormats::Short : EGuidFormats::DigitsWithHyphensInBraces));
 
 		bool bLaunched = TrainingProcess.Launch(
